#!/usr/bin/env bash

set -e

function usage
{
  echo
  echo "$(basename $0) manages your EC2 instances"
  echo
  echo "usage: $(basename $0) [launch environment] [--role rolename] | [terminate instance-id] | [list] | [--help]"
  echo
  echo "       launch             : launch a new EC2 instance"
  echo "       --role             : use role when launching servers"  
  echo "       terminate          : terminate an existing EC2 instance"
  echo "       list               : list existing EC2 instances"
  echo "       --help             : displays the information you're reading now"
  echo
}

while test $# != 0; do
  case "$1" in
    launch)
      LAUNCH=1
      if [ "$2" != "" ]; then
        shift
        ENVIRONMENT=$1
      fi
      ;;
    terminate)
      shift
      TERMINATE=$1
      ;;
    list)
      LIST=1
      ;;
    --role)
      shift
      ROLE=$1
      ;;      
    --help)
      usage
      exit
      ;;
    *)
      usage
      exit 1
      ;;
  esac
  shift
done

bail() {
  echo -e "\033[31m  failed: $1\033[0m"
  exit 1
}

# Sets the name of the EC2 instance to the supplied name.
#
# $1 = EC2 instance id
# $2 = name
set_instance_name() {
  local INSTANCE_ID=$1
  local NAME_TAG=$2

  ec2-create-tags $INSTANCE_ID --tag "Name=$NAME_TAG"
}

# Get the IP address of a server given it's Amazon EC2 instance name
#
# $1 = EC2 instance id
get_instance_ip() {
  local INSTANCE_ID=$1
  local DESCRIBE_INSTANCE=$(ec2-describe-instances --filter "instance-state-name=running" $INSTANCE_ID)

  local IP_ADDR=$(echo "$DESCRIBE_INSTANCE" | grep "NIC\s" | cut -f 7)
  if [ ! $IP_ADDR ]; then
    # We're running without a subnet
    local IP_ADDR=$(echo "$DESCRIBE_INSTANCE" | grep "INSTANCE\s" | cut -f 17)
  fi

  echo $IP_ADDR
}

wait_for_instance_to_be_provisioned() {
  local INSTANCE_NAME=$1

  local TOTAL_TIME=0
  local MAX_TIME=181
  while [ $MAX_TIME -gt $TOTAL_TIME ] && ! ec2-describe-instances $INSTANCE_NAME | grep -q "running"
  do
    TOTAL_TIME=$(( $TOTAL_TIME + 5 ))
    echo "$INSTANCE_NAME not running. Waiting 5 seconds before checking again..."
    sleep 5s
  done

  if [ $MAX_TIME -lt $TOTAL_TIME ]; then
    bail "Instance $INSTANCE_NAME is taking too long to enter the running state. Exiting..."
  fi
}

[[ $(which ec2-run-instances) ]] || bail "No EC2 AMI Tools found"

if [ ! $ENVIRONMENT ]; then
  echo "Assuming staging environment..."
  ENVIRONMENT="staging"
fi

if [ $LAUNCH ]; then
  ENV_FILE=.env.$ENVIRONMENT
  [[ -f $ENV_FILE ]] || bail "no $ENV_FILE found"
  source $ENV_FILE

  [[ -n $INSTANCE_TYPE && $REGION && $KEYPAIR && $AMI ]] || bail "invalid config"

  if [ ! $TAG ]; then
    TAG=${PWD##*/}
    [[ $ROLE ]] && TAG+="_$ROLE"
    TAG+="_$ENVIRONMENT"
  fi

  # GROUP defaults to 'default' if not set
  if [ ! $GROUP ]; then
    GROUP="default"
  fi

  EC2_RUN_CMD="ec2-run-instances --instance-type $INSTANCE_TYPE --group $GROUP --region $REGION --key $KEYPAIR $AMI"
  if [ $SUBNET ]; then
    EC2_RUN_CMD="$EC2_RUN_CMD --subnet $SUBNET"
  fi
  EC2_RUN_RESULT=$($EC2_RUN_CMD)


  INSTANCE_NAME=$(echo ${EC2_RUN_RESULT} | sed 's/RESERVATION.*INSTANCE //' | sed 's/ .*//')

  wait_for_instance_to_be_provisioned $INSTANCE_NAME

  set_instance_name $INSTANCE_NAME $TAG

  echo
  echo "Instance $INSTANCE_NAME is now running."                                     
 
  INSTANCE_IP="$(get_instance_ip $INSTANCE_NAME)"
  
  echo "You can ssh into your new instance with the following command:"
  echo "ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP"
  exit 0
fi

if [ $TERMINATE ]; then
  wait_for_instance_to_be_provisioned $TERMINATE
  echo "Getting $TERMINATE's IP..."

  INSTANCE_IP="$(get_instance_ip $TERMINATE)"

  echo "Removing $INSTANCE_IP from known_hosts..."
  ssh-keygen -R $INSTANCE_IP

  echo "Terminating $INSTANCE_IP..."
  ec2-terminate-instances $TERMINATE
  exit 0
fi

if [ $LIST ]; then
  ec2-describe-instances | grep 'INSTANCE' | grep 'running' | cut  -f 2,4,17
  exit 0
fi